Mithilfe von gprof kann man ziemlich schnell feststellen, dass die meiste Laufzeit in calculate steckt.
Auch erkennt man sofort, dass getResiduum zwar auch ein wenig an Zeit benötigt diese aber wegen einer
hohen anzahl Aufrufe im vergleich zu calculate vernachlässigbar ist.

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 95.56     14.67    14.67        1    14.67    15.32  calculate
  4.24     15.32     0.65 275825664     0.00     0.00  getResiduum
  0.33     15.37     0.05        1     0.05     0.05  initMatrices
  0.00     15.37     0.00        4     0.00     0.00  allocateMemory
  0.00     15.37     0.00        1     0.00     0.00  AskParams
  0.00     15.37     0.00        1     0.00     0.00  DisplayMatrix
  0.00     15.37     0.00        1     0.00     0.00  allocateMatrices
  0.00     15.37     0.00        1     0.00     0.00  displayStatistics
  0.00     15.37     0.00        1     0.00     0.00  freeMatrices
  0.00     15.37     0.00        1     0.00     0.00  initVariables


Die Ausgabe von perf hat uns kaum weiter geholfen

 Performance counter stats for './partdiff-seq 1 2 64 1 2 1024':

      20477.089125      task-clock (msec)         #    0.999 CPUs utilized          
               152      context-switches          #    0.007 K/sec                  
                 0      cpu-migrations            #    0.000 K/sec                  
             1,124      page-faults               #    0.055 K/sec                  
                 0      cycles                    #    0.000 GHz                    
    39,639,996,626      stalled-cycles-frontend   #    0.00% frontend cycles idle   
    20,442,645,334      stalled-cycles-backend    #    0.00% backend  cycles idle   
    62,116,753,388      instructions                                                
                                                  #    0.64  stalled cycles per insn
     5,249,934,194      branches                  #  256.381 M/sec                  
           932,447      branch-misses             #    0.02% of all branches        

      20.502362943 seconds time elapsed


Zur beschleunigung des Programmes haben wir in calculate() die Reihenfolge der for-Schleifen vertauscht,
dies hat die Laufzeit bereits halbiert. Mithilfe der Compileroptimierung -O3 wird dem Compiler erlaubt Schleifen
abzuwickeln und zu vektorisieren. Dies bringt die Laufzeit noch weiter runter und ändert am ergebniss in diesem fall
dankbarerweise nichts:

./partdiff-seq 1 2 64 1 2 1024

============================================================
Program for calculation of partial differential equations.  
============================================================
(c) Dr. Thomas Ludwig, TU München.
    Thomas A. Zochler, TU München.
    Andreas C. Schmidt, TU München.
============================================================
Berechnungszeit:    1.351884 s 
Berechnungsmethode: Jacobi
Interlines:         64
Stoerfunktion:      f(x,y)=0
Terminierung:       Anzahl der Iterationen
Anzahl Iterationen: 1024
Norm des Fehlers:   3.273757e-04
Matrix:
 1.0000 0.8750 0.7500 0.6250 0.5000 0.3750 0.2500 0.1250 0.0000
 0.8750 0.0071 0.0031 0.0025 0.0020 0.0015 0.0010 0.0010 0.1250
 0.7500 0.0031 0.0000 0.0000 0.0000 0.0000 0.0000 0.0010 0.2500
 0.6250 0.0025 0.0000 0.0000 0.0000 0.0000 0.0000 0.0015 0.3750
 0.5000 0.0020 0.0000 0.0000 0.0000 0.0000 0.0000 0.0020 0.5000
 0.3750 0.0015 0.0000 0.0000 0.0000 0.0000 0.0000 0.0025 0.6250
 0.2500 0.0010 0.0000 0.0000 0.0000 0.0000 0.0000 0.0031 0.7500
 0.1250 0.0010 0.0010 0.0015 0.0020 0.0025 0.0031 0.0071 0.8750
 0.0000 0.1250 0.2500 0.3750 0.5000 0.6250 0.7500 0.8750 1.0000

Man hätte noch ein kleines bisschen Laufzeit einsparen können indem man beim allokieren der Matrixen
direkt calloc benutzt um sie später nicht nochmal mit 0 initialisieren zu müssen, allerdings wurde das
allokieren in eine eigene Funktion ausgelagert und wir wollten sicherstellen, dass wir damit nicht an
anderer Stelle unnötig speicher mit 0 Initialisieren.
Ausserdem ist die Matrix 'Matrix' nur eine Matrix die auf die richtigen Speicherstellen in 'M' verweist
und damit nicht zwingend notwendig. Der Zugriff auf die Elemente der Matrix 'Matrix' ist nur unendlich 
viel besser zu verstehen als das berechnen des entsprechenden Index in der Matrix 'M' und die 
Speicherausbeute durch das weglassen von 'Matrix' ist vermutlich nicht den Verständlichkeitsverlust wert.
